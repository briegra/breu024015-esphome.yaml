substitutions:
  devicename:    "bewaesserung-03"
  friendly_name: "Bewässerung 03 (ESP8266)"
  mqtt_prefix:   "bewaesserung-03"
  ap_fallback:   "bewaesserung-03 SSID"

esp8266:
  board: esp12e

esphome:
  name: "${devicename}"
  includes:
    - ap_name_mapper.h
  on_boot:
    priority: -100
    then:
      - lambda: |-
          ESP_LOGE("BOOT", "ESP gestartet");
          ESP_LOGE("BOOT", "Warte auf Initialisierung: 10 Sekunden");
      - delay: 5s
      - lambda: |-
          id(restart_esp).turn_off();
          id(init_done) = true;
          id(restart_counter)++;
          id(restart_counter_sensor).publish_state(id(restart_counter));
          ESP_LOGE("BOOT", "Init abgeschlossen");

logger:
  level: WARN
  logs:
   sensor: ERROR  
   mqtt: WARN    
   text_sensor: WARN

ota:
  platform: esphome
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${ap_fallback}"
    password: "wPsNYum3nwl9"

# Optional manual IP
#  manual_ip:
#    static_ip: 192.168.24.250
#    gateway: 192.168.24.1
#    subnet: 255.255.255.0     
#    dns1: 192.168.24.1  

api:
  encryption:
    key: !secret api_key
  reboot_timeout: 0s  # ⬅️ Deaktiviert den Auto-Reboot bei fehlender API-Verbindung    

web_server:
  port: 80

############################################################################################################################################
# time
############################################################################################################################################

time:
  - platform: sntp
    id: system_time
    servers: 
      - time.myrbr.lcl
    timezone: Europe/Berlin
    on_time_sync:
      then:
        - logger.log: "SNTP-Zeit synchronisiert!"
        - component.update: last_boot_time_sensor

############################################################################################################################################
# mqtt
############################################################################################################################################

mqtt:
  topic_prefix: "${mqtt_prefix}"
  discovery: false
  broker: mqtt.myrbr.lcl
  id: mqtt_client
  port: 1887
  username: !secret mqtt_user
  password: !secret mqtt_password

  on_disconnect:
    then:
      - logger.log: "MQTT offline – alle Relais werden ausgeschaltet"
      - switch.turn_off: sw_gpio_ventil_01
      - switch.turn_off: sw_gpio_ventil_02
      - switch.turn_off: sw_gpio_ventil_03

  on_message:
    ############ Ventil 1
    - topic: "${mqtt_prefix}/Ventil_01/command"
      payload: "ON"
      then:
        - lambda: |-
            ESP_LOGI("Logik", "Venitl_01 ein per MQTT");
            if (id(init_done)) id(sw_gpio_ventil_01).turn_on();

    - topic: "${mqtt_prefix}/Ventil_01/command"
      payload: "OFF"
      then:
        - lambda: |-
            ESP_LOGI("Logik", "Venitl_01 aus per MQTT");
            if (id(init_done)) id(sw_gpio_ventil_01).turn_off();

    ############ Ventil 2
    - topic: "${mqtt_prefix}/Ventil_02/command"
      payload: "ON"
      then:
        - lambda: |-
            ESP_LOGI("Logik", "Venitl_02 ein per MQTT");
            if (id(init_done)) id(sw_gpio_ventil_02).turn_on();

    - topic: "${mqtt_prefix}/Ventil_02/command"
      payload: "OFF"
      then:
        - lambda: |-
            ESP_LOGI("Logik", "Venitl_02 aus per MQTT");
            if (id(init_done)) id(sw_gpio_ventil_02).turn_off();

    ############ Ventil 3
    - topic: "${mqtt_prefix}/Ventil_03/command"
      payload: "ON"
      then:
        - lambda: |-
            ESP_LOGI("Logik", "Venitl_03 ein per MQTT");
            if (id(init_done)) id(sw_gpio_ventil_03).turn_on();

    - topic: "${mqtt_prefix}/Ventil_03/command"
      payload: "OFF"
      then:
        - lambda: |-
            ESP_LOGI("Logik", "Venitl_03 aus per MQTT");
            if (id(init_done)) id(sw_gpio_ventil_03).turn_off();

############################################################################################################################################
# globals
############################################################################################################################################

globals:
  - id: init_done
    type: bool
    restore_value: false
    initial_value: "false"

  - id: restart_counter
    type: int
    restore_value: true
    initial_value: "0"

  # Zähler
  - id: zaehler_total
    type: int
    restore_value: true
    initial_value: "0"


#binary_sensor:

############################################################################################################################################
# sensor
############################################################################################################################################

sensor:
  - platform: template
    name: "ESP Restart Counter"
    id: restart_counter_sensor
    accuracy_decimals: 0
    state_topic: "${mqtt_prefix}/ESP/restart/counter"

  - platform: wifi_signal
    name: "WiFi-RSSI"
    update_interval: 60s
    state_topic: "${mqtt_prefix}/WiFi/RSSI"

  - platform: uptime
    name: "Uptime"
    id: esp_uptime
    update_interval: 1000ms
    internal: true
    on_value:
      then:
        - lambda: |-
            if (id(init_done)) {
              int seconds = (int) id(esp_uptime).state;
              int days = seconds / 86400;
              seconds %= 86400;
              int hours = seconds / 3600;
              seconds %= 3600;
              int minutes = seconds / 60;
              seconds %= 60;
              char buffer[32];
              sprintf(buffer, "%d Tage %02d:%02d:%02d", days, hours, minutes, seconds);
              id(uptime_string).publish_state(buffer);
            }

   
############################################################################################################################################
# interval
############################################################################################################################################

interval:
  - interval: 500ms
    then:
      if:
        condition:
          wifi.connected:
        then:
          - output.turn_on: WiFi_led
        else:
          - output.turn_on: WiFi_led
          - delay: 125ms
          - output.turn_off: WiFi_led


#switch:


output:
  - platform: gpio
    pin: GPIO2
    id: WiFi_led
    inverted: yes

############################################################################################################################################
# text_sensor
############################################################################################################################################

text_sensor:
  - platform: template
    name: "ESP Restart Time"
    id: last_boot_time_sensor
    icon: "mdi:clock"
    update_interval: never
#    update_interval: 1000ms
    state_topic: "${mqtt_prefix}/ESP/restart/time"
    lambda: |-
      if (!id(system_time).now().is_valid()) {
          return {"Warte auf SNTP..."};        
      }
      ESP_LOGE("BOOT", "Init abgeschlossen");
      auto now = id(system_time).now();
      auto boot_timestamp = now.timestamp - (int) id(esp_uptime).state;
      auto boot_time = esphome::ESPTime::from_epoch_local(boot_timestamp);
      char str[25];
      snprintf(str, sizeof(str), "%02u.%02u.%02u %02u:%02u:%02u",
               (unsigned int) boot_time.day_of_month,
               (unsigned int) boot_time.month,
               (unsigned int) (boot_time.year % 100),
               (unsigned int) boot_time.hour,
               (unsigned int) boot_time.minute,
               (unsigned int) boot_time.second);
      return {str};

  - platform: template
    name: "ESP Uptime Formatted"
    id: uptime_string
    state_topic: "${mqtt_prefix}/ESP/uptime"

  - platform: wifi_info
    ip_address:
      name: WiFi-IPAddress
      state_topic: "${mqtt_prefix}/WiFi/IPAddress"
    ssid:
      name: WiFi-SSID
      state_topic: "${mqtt_prefix}/WiFi/SSID"
    bssid:
      id: bssid_sensor
      name: WiFi-BSSID
      state_topic: "${mqtt_prefix}/WiFi/BSSID"
    mac_address:
      name: WiFi-MacAddress
      state_topic: "${mqtt_prefix}/WiFi/MAC"

  - platform: custom
    lambda: |-
      auto ap_name_sensor = new APNameTemplate();
      ap_name_sensor->bssid_sensor = id(bssid_sensor);
      App.register_component(ap_name_sensor);
      return {ap_name_sensor};
    text_sensors:
      - name: "WiFi-Access Point Name"
        id: ap_name_sensor
        disabled_by_default: true
        on_value:
          then:
            - if:
                condition:
                  lambda: 'return id(init_done);'
                then:
                  - mqtt.publish:
                      topic: "${mqtt_prefix}/WiFi/AP_Name"
                      payload: !lambda 'return id(ap_name_sensor).state;'

############################################################################################################################################
# switch
############################################################################################################################################

switch:
  - platform: template
    name: "ESP Restart"
    id: restart_esp
    optimistic: true
    retain: true
    state_topic: "${mqtt_prefix}/ESP/restart/state"
    command_topic: "${mqtt_prefix}/ESP/restart/command"
    turn_on_action:
      - delay: 500ms
      - lambda: |
          ESP_LOGE("Switch", "ESP wird jetzt neugestartet...");
          ESP.restart();       
        
  - platform: gpio
    name: "Ventil 01 - Nordhang"
    id:  sw_gpio_ventil_01
    pin: GPIO14
    restore_mode: ALWAYS_OFF
    internal: false
    retain: true
    disabled_by_default: true
    
  - platform: gpio
    name: "Ventil 02 - Eiben West"
    id:  sw_gpio_ventil_02
    pin: GPIO12
    restore_mode: ALWAYS_OFF
    internal: false
    retain: true
    disabled_by_default: true

  - platform: gpio
    name: "Ventil 03 - Eiben Nord"
    id:  sw_gpio_ventil_03
    pin: GPIO13
    restore_mode: ALWAYS_OFF
    internal: false
    retain: true
    disabled_by_default: true