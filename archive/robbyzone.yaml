esphome:
  name: "lamellendach_rohrmotor"
  friendly_name: "Lamellendach Rohrmotor"
  platform: esp8266
#  board: esp8285
  board: esp12e

# Enable Home Assistant API
api:
  password: "vlBpyX#7jSI5"

ota:
  password: "c06c6f63f86fed1c5dedbf87ac618f25"  

# Enable logging
#logger:

wifi:
#  manual_ip:
#    static_ip: 192.168.24.248
#    gateway: 192.168.24.1
#    subnet: 255.255.255.0

  ssid: "HIOT"
  password: "28474172737459768132958148552971"

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Robby Zone Fallback Hotspot"
    password: "E6i5EPeRH8aY"

# Enable Web server
web_server:
  port: 80

captive_portal:


text_sensor:            #WiFi Info
- platform: wifi_info
  ip_address: 
    name: IPAddress
  ssid:
    name: SSID
  bssid:
    name: BSSID
  mac_address:
    name: Mac
  
    
- platform: template
  name: Uptime Human Readable
  id: uptime_human

switch:
  - platform: gpio
    name: Relay5
    id: relay5
    pin: 
      number: GPIO5
      inverted: yes
#    on_turn_on:
#    - delay: 1000ms
#    - logger.log: "Auto_Off: Reserve"
#    - switch.turn_off: relay5    


  - platform: gpio
    name: Relay12
    id: relay12
    pin: 
      number: GPIO12
      inverted: yes
#    on_turn_on:
#    - delay: 1000ms
#    - logger.log: "Auto_Off: Reserve"
#    - switch.turn_off: relay12

  - platform: gpio
    name: Relay13
    id: relay13
    pin: 
      number: GPIO13
      inverted: yes
#    on_turn_on:
#    - delay: 1000ms
#    - logger.log: "Auto_Off: Reserve"
#    - switch.turn_off: relay13


sensor:
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

#Wifi Signalstaerke
  - platform: wifi_signal
    name: "WiFi Signal Sensor"
    update_interval: 60s

